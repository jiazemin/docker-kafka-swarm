# TODO
# - SET LB domain name with KAFKA_ADVERTISED_LISTENERS
version: '3.4'
services:
  # https://github.com/wurstmeister/kafka-docker
  # https://medium.com/@NegiPrateek/wtf-setting-up-kafka-cluster-using-docker-stack-5efc68841c23
  kafka01:
    image: wurstmeister/kafka:2.11-1.1.1
    environment:
      # Get container host's hostname
      #HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      # Get container host's IP
      #HOSTNAME_COMMAND: "docker info | grep \"Node Address:\" | cut -d' ' -f 4"
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
      KAFKA_BROKER_ID: 1
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      #KAFKA_ADVERTISED_LISTENERS: "INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094"
      #KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_LISTENERS: PLAINTEXT://:9092
      #KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPIC:-false}
      KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=1099"
      JMX_PORT: 1099
    #ports:
    #  - 9094:9094
    deploy:
      #mode: global
      update_config:
        parallelism: 1
        delay: 10s
      placement:
        constraints:
          - node.labels.kafka==1
      resources:
        reservations:
          cpus: '0.3'
          memory: '3G'
        limits:
          cpus: '0.5'
          memory: '4G'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-logs01:/tmp/kafka-logs
      - kafka01:/kafka
    networks:
      - zookeeper
      - kafka
  kafka02:
    image: wurstmeister/kafka:2.11-1.1.1
    environment:
      # Get container host's hostname
      #HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      # Get container host's IP
      #HOSTNAME_COMMAND: "docker info | grep \"Node Address:\" | cut -d' ' -f 4"
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
      KAFKA_BROKER_ID: 2
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      #KAFKA_ADVERTISED_LISTENERS: "INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094"
      #KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://0.0.0.0:9095
      KAFKA_LISTENERS: PLAINTEXT://:9092
      #KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPIC:-false}
      KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=1099"
      JMX_PORT: 1099
    #ports:
    #  - 9095:9095
    deploy:
      #mode: global
      update_config:
        parallelism: 1
        delay: 10s
      placement:
        constraints:
          - node.labels.kafka==2
      resources:
        reservations:
          cpus: '0.3'
          memory: '3G'
        limits:
          cpus: '0.5'
          memory: '4G'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-logs02:/tmp/kafka-logs
      - kafka02:/kafka
    networks:
      - zookeeper
      - kafka
  kafka03:
    image: wurstmeister/kafka:2.11-1.1.1
    environment:
      # Get container host's hostname
      #HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      # Get container host's IP
      #HOSTNAME_COMMAND: "docker info | grep \"Node Address:\" | cut -d' ' -f 4"
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
      KAFKA_BROKER_ID: 3
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      #KAFKA_ADVERTISED_LISTENERS: "INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094"
      #KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://0.0.0.0:9096
      KAFKA_LISTENERS: PLAINTEXT://:9092
      #KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPIC:-false}
      KAFKA_HEAP_OPTS: "-Xmx2G -Xms2G"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=1099"
      JMX_PORT: 1099
    #ports:
    #   - 9096:9096
    deploy:
      #mode: global
      update_config:
        parallelism: 1
        delay: 10s
      placement:
        constraints:
          - node.labels.kafka==3
      resources:
        reservations:
          cpus: '0.3'
          memory: '3G'
        limits:
          cpus: '0.5'
          memory: '4G'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-logs03:/tmp/kafka-logs
      - kafka03:/kafka
    networks:
      - zookeeper
      - kafka
  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.2.0
    command: --kafka.server=tasks.kafka01:9092 --kafka.server=tasks.kafka02:9092 --kafka.server=tasks.kafka03:9092
    ports:
     # Following the scheme, https://github.com/prometheus/prometheus/wiki/Default-port-allocations
     - 9308:9308
    deploy:
      mode: replicated
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M      
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      endpoint_mode: vip
    networks:
      - zookeeper
      - kafka

  kafka-manager:
    image: sheepkiller/kafka-manager
    environment:
      ZK_HOSTS: "zoo1:2181,zoo2:2181,zoo3:2181"
      APPLICATION_SECRET: "@dminP@ssw0rd"
    ports:
     # Following the scheme, https://github.com/prometheus/prometheus/wiki/Default-port-allocations
     - 9001:9000
    networks:
      - zookeeper
      - kafka


volumes:
  kafka-logs01:
  kafka-logs02:
  kafka-logs03:
  kafka01:
  kafka02:
  kafka03:
  
networks:
  kafka:
    external:
      name: ${NETWORK_KAFKA:-kafka}
  zookeeper:
    external:
      name: ${NETWORK_ZOOKEEPER:-zookeeper}
